scilla_version 0

import IntUtils
library CRL

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let two_msgs =
fun (msg1 : Message) =>
fun (msg2 : Message) =>
  let msgs_tmp = one_msg msg2 in
  Cons {Message} msg1 msgs_tmp

(* Error events *)
type Error =
| CodeIsSender
| CodeInsufficientFunds
| CodeInsufficientAllowance
| CodeNotContractOwner
| CodeRatioCannotBeZero
| CodeAddressCannotBeZero
| CodeNotCRLX

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeIsSender              => Int32 -1
      | CodeInsufficientFunds     => Int32 -2
      | CodeInsufficientAllowance => Int32 -3
      | CodeNotContractOwner      => Int32 -4
      | CodeRatioCannotBeZero     => Int32 -5
      | CodeAddressCannotBeZero   => Int32 -6
      | CodeNotCRLX               => Int32 -7
      end
    in
    { _exception : "Error"; code : result_code }
  
let zero = Uint128 0
let zero_address = 0x0000000000000000000000000000000000000000

type Unit =
| Unit

let get_val =
  fun (some_val: Option Uint128) =>
  match some_val with
  | Some val => val
  | None => zero
  end

contract CRL
(
  contract_owner: ByStr20,
  name : String,
  symbol: String,
  decimals: Uint32,
  init_supply : Uint128
)

field total_supply : Uint128 = init_supply

field balances: Map ByStr20 Uint128 
  = let emp_map = Emp ByStr20 Uint128 in
    builtin put emp_map contract_owner init_supply

field allowances: Map ByStr20 (Map ByStr20 Uint128) 
  = Emp ByStr20 (Map ByStr20 Uint128)

field swapping_ratio : Uint128 = Uint128 1000
field crlx_contract: ByStr20 = zero_address

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsNotSender(address: ByStr20)
  is_sender = builtin eq _sender address;
  match is_sender with
  | True =>
    err = CodeIsSender;
    ThrowError err
  | False =>
  end
end

procedure IsContractOwner()
  is_contract_owner = builtin eq contract_owner _sender;
  match is_contract_owner with
  | True => 
  | False =>
    err = CodeNotContractOwner;
    ThrowError err
  end
end

procedure IsContractCRLX()
  crlx_contract_address <- crlx_contract;
  is_contract = builtin eq crlx_contract_address _sender;
  match is_contract with
  | True => 
  | False =>
    err = CodeNotCRLX;
    ThrowError err
  end
end

procedure AuthorizedMoveIfSufficientBalance(from: ByStr20, to: ByStr20, amount: Uint128)
  o_from_bal <- balances[from];
  bal = get_val o_from_bal;
  can_do = uint128_le amount bal;
  match can_do with
  | True =>
    (* Subtract amount from from and add it to to address *)
    new_from_bal = builtin sub bal amount;
    balances[from] := new_from_bal;
    (* Adds amount to to address *)
    get_to_bal <- balances[to];
    new_to_bal = match get_to_bal with
    | Some bal => builtin add bal amount
    | None => amount
    end;
    balances[to] := new_to_bal
  | False =>
    (* Balance not sufficient *)
    err = CodeInsufficientFunds;
    ThrowError err
  end
end

(* @dev: Increase the allowance of an approved_spender over the caller tokens. Only token_owner allowed to invoke.   *)
(* param spender:      Address of the designated approved_spender.                                                   *)
(* param amount:       Number of tokens to be increased as allowance for the approved_spender.                       *)
transition IncreaseAllowance(spender: ByStr20, amount: Uint128)
  IsNotSender spender;
  some_current_allowance <- allowances[_sender][spender];
  current_allowance = get_val some_current_allowance;
  new_allowance = builtin add current_allowance amount;
  allowances[_sender][spender] := new_allowance;
  e = {_eventname : "IncreasedAllowance"; token_owner : _sender; spender: spender; new_allowance : new_allowance};
  event e
end

(* @dev: Decrease the allowance of an approved_spender over the caller tokens. Only token_owner allowed to invoke. *)
(* param spender:      Address of the designated approved_spender.                                                 *)
(* param amount:       Number of tokens to be decreased as allowance for the approved_spender.                     *)
transition DecreaseAllowance(spender: ByStr20, amount: Uint128)
  IsNotSender spender;
  some_current_allowance <- allowances[_sender][spender];
  current_allowance = get_val some_current_allowance;
  new_allowance =
    let amount_le_allowance = uint128_le amount current_allowance in
      match amount_le_allowance with
      | True => builtin sub current_allowance amount
      | False => zero
      end;
  allowances[_sender][spender] := new_allowance;
  e = {_eventname : "DecreasedAllowance"; token_owner : _sender; spender: spender; new_allowance : new_allowance};
  event e
end

(* @dev: Moves an amount tokens from _sender to the recipient. Used by token_owner. *)
(* @dev: Balance of recipient will increase. Balance of _sender will decrease.      *)
(* @param to:  Address of the recipient whose balance is increased.                 *)
(* @param amount:     Amount of tokens to be sent.                                  *)
transition Transfer(to: ByStr20, amount: Uint128)
  AuthorizedMoveIfSufficientBalance _sender to amount;
  e = {_eventname : "TransferSuccess"; sender : _sender; recipient : to; amount : amount};
  event e;
  (* Prevent sending to a contract address that does not support transfers of token *)
  msg_to_recipient = {_tag : "RecipientAcceptTransfer"; _recipient : to; _amount : zero; 
                      sender : _sender; recipient : to; amount : amount};
  msg_to_sender = {_tag : "TransferSuccessCallBack"; _recipient : _sender; _amount : zero; 
                  sender : _sender; recipient : to; amount : amount};
  msgs = two_msgs msg_to_recipient msg_to_sender;
  send msgs
end

(* @dev: Move a given amount of tokens from one address to another using the allowance mechanism. The caller must be an approved_spender. *)
(* @dev: Balance of recipient will increase. Balance of token_owner will decrease.                                                        *)
(* @param from:    Address of the token_owner whose balance is decreased.                                                                 *)
(* @param to:      Address of the recipient whose balance is increased.                                                                   *)
(* @param amount:  Amount of tokens to be transferred.                                                                                    *)
transition TransferFrom(from: ByStr20, to: ByStr20, amount: Uint128)
  o_spender_allowed <- allowances[from][_sender];
  allowed = get_val o_spender_allowed;
  can_do = uint128_le amount allowed;
  match can_do with
  | True =>
    AuthorizedMoveIfSufficientBalance from to amount;
    e = {_eventname : "TransferFromSuccess"; initiator : _sender; sender : from; recipient : to; amount : amount};
    event e;
    new_allowed = builtin sub allowed amount;
    allowances[from][_sender] := new_allowed;
    (* Prevent sending to a contract address that does not support transfers of token *)
    msg_to_recipient = {_tag: "RecipientAcceptTransferFrom"; _recipient : to; _amount: zero; 
                        initiator: _sender; sender : from; recipient: to; amount: amount};
    msg_to_sender = {_tag: "TransferFromSuccessCallBack"; _recipient: _sender; _amount: zero; 
                    initiator: _sender; sender: from; recipient: to; amount: amount};
    msgs = two_msgs msg_to_recipient msg_to_sender;
    send msgs
  | False =>
    err = CodeInsufficientAllowance;
    ThrowError err
  end
end

(* @dev: Allows contract owner to set the swapping ratio . *)
(* @param ratio: The ration of swap that is to be set e.g CRL:CRLX::1:1000 then set ration as 1000.                                                                 *)

transition SetRatio(ratio: Uint128)
  IsContractOwner;
  is_zero = builtin eq ratio zero;
  match is_zero with 
  | False => 
      swapping_ratio := ratio
  | True => 
      err = CodeRatioCannotBeZero;
      ThrowError err
  end
end

(* @dev: Allow owner to set address of CRLX contract. *)
(* @param address: The address of CRLX contract.                                                                 *)

transition SetCRLXAddress(address: ByStr20)
  IsContractOwner;
  is_zero = builtin eq address zero_address;
  match is_zero with 
  | False => 
      crlx_contract:= address
  | True => 
      err = CodeAddressCannotBeZero;
      ThrowError err
  end
end

(* @dev: Allow user to swap CRLX for CRL token. Transition is called via message passing.*)
(* @param address: The token amount in CRLX to swap to CRLX.                                                                 *)
(* @param from: The address of user to swap token.                                                                 *)
transition ExchangeToCRLToken(from: ByStr20, token_amount: Uint128)
    (* Transfer the amount from the current contract owner to address *)
    IsContractCRLX;
    AuthorizedMoveIfSufficientBalance contract_owner from token_amount;
    e = {_eventname : "TransferSuccess"; sender : _sender; recipient : from; amount : token_amount};
    event e;
    (* Prevent sending to a contract address that does not support transfers of token *)
    msg_to_recipient = {_tag : "RecipientAcceptTransfer"; _recipient : from; _amount : zero; 
                        sender : _sender; recipient : from; amount : token_amount};
    msg_to_sender = {_tag : "TransferSuccessCallBack"; _recipient : _sender; _amount : zero; 
                    sender : _sender; recipient : from; amount : token_amount};
    msgs = two_msgs msg_to_recipient msg_to_sender;
    send msgs
end

(* @dev: Allow user to swap CRL for CRLX token. *)
(* @param address: The token amount in CRL to swap to CRLX.                                                                 *)
transition RedeemToCRLxToken(token_amount: Uint128)

    AuthorizedMoveIfSufficientBalance _sender contract_owner token_amount;
    e = {_eventname : "TransferSuccess"; sender : _sender; recipient : contract_owner; amount : token_amount};
    event e;
        
    contract_address <- crlx_contract;
    ratio <- swapping_ratio;
    redeem_token_amount = builtin mul token_amount ratio;

    msg_to_token =  {
        _tag : "ExchangeToCRLxToken";
        _recipient: contract_address;
        _amount: zero;
        from: _sender;
        token_amount: redeem_token_amount
    };
    msgs = one_msg msg_to_token;
    send msgs
end

transition RecipientAcceptTransfer(sender: ByStr20, recipient : ByStr20, amount: Uint128)
    
end

transition TransferSuccessCallBack(sender: ByStr20, recipient : ByStr20, amount: Uint128)
    
end


